# =============================================================================
# Face Emotion Music Detector - Docker Configuration
# =============================================================================
# Author: Om Gedam
# GitHub: https://github.com/itsomg134
# Description: Multi-stage Docker build for Face Emotion Music Detector
# =============================================================================

# =============================================================================
# Stage 1: Base Image Setup
# =============================================================================
# Using Node.js 18 LTS (Long Term Support) on Alpine Linux for minimal size



# Run tests (placeholder for now)
# Add your test command here when tests are implemented
# RUN npm test

# =============================================================================
# Image Build Instructions
# =============================================================================

# Build production image:
# docker build --target production -t face-emotion-detector:latest .

# Build development image:
# docker build --target development -t face-emotion-detector:dev .

# Build testing image:
# docker build --target testing -t face-emotion-detector:test .

# =============================================================================
# Docker Run Commands
# =============================================================================

# Run production container:
# docker run -d -p 3000:3000 --name emotion-detector face-emotion-detector:latest

# Run development container with volume mounting:
# docker run -d -p 3000:3000 -p 9229:9229 -v $(pwd):/usr/src/app --name emotion-detector-dev face-emotion-detector:dev

# Run with environment variables:
# docker run -d -p 3000:3000 -e PORT=8080 --name emotion-detector face-emotion-detector:latest

# =============================================================================
# Docker Compose Support
# =============================================================================

# This Dockerfile is optimized for use with Docker Compose
# See docker-compose.yml for multi-container orchestration

# =============================================================================
# Best Practices Implemented
# =============================================================================

# 1. Multi-stage builds for smaller images
# 2. Layer caching optimization (package.json copied before source)
# 3. Non-root user for security
# 4. Health checks for container monitoring
# 5. Proper signal handling with dumb-init
# 6. Minimal base image (Alpine Linux)
# 7. Clear documentation and comments
# 8. Environment-specific stages (dev, test, prod)
# 9. Metadata labels for image information
# 10. Security scanning friendly structure

# =============================================================================
# Image Size Optimization
# =============================================================================

# Techniques used to minimize image size:
# - Alpine Linux base (5MB vs 100MB+ for full Linux)
# - Multi-stage builds (only production deps in final image)
# - Cleaned npm cache
# - No unnecessary packages
# - .dockerignore file (create separately)

# Expected image sizes:
# - Production: ~150-200MB
# - Development: ~300-400MB (includes dev dependencies)

# =============================================================================
# Security Features
# =============================================================================

# 1. Non-root user (nodejs:nodejs)
# 2. Minimal attack surface (Alpine base)
# 3. No secrets in image
# 4. Read-only file system support
# 5. Health checks for failure detection
# 6. Proper signal handling
# 7. Latest security patches (Alpine updates)

# =============================================================================
# Monitoring and Logging
# =============================================================================

# Application logs are written to stdout/stderr
# Docker captures these automatically
# Use: docker logs <container-name> to view

# Health check status:
# docker inspect --format='{{.State.Health.Status}}' <container-name>

# =============================================================================
# Performance Optimization
# =============================================================================

# 1. Layer caching for faster rebuilds
# 2. npm ci instead of npm install (deterministic)
# 3. Production dependencies only
# 4. Optimized Node.js flags (can be added to CMD)
# 5. Alpine base for faster pulls

# =============================================================================
# Maintenance Notes
# =============================================================================

# Update base image regularly:
# - Check for Node.js LTS updates
# - Update Alpine Linux version
# - Review security advisories

# Rebuild periodically:
# docker build --no-cache -t face-emotion-detector:latest .

# Clean up old images:
# docker image prune -a

# =============================================================================
# Troubleshooting
# =============================================================================

# View container logs:
# docker logs -f <container-name>

# Execute commands inside running container:
# docker exec -it <container-name> sh

# Inspect container:
# docker inspect <container-name>

# Check resource usage:
# docker stats <container-name>

# =============================================================================
# Future Enhancements
# =============================================================================

# TODO: Add TensorFlow.js for real emotion detection
# TODO: Add Redis for caching
# TODO: Add PostgreSQL for data persistence
# TODO: Add Nginx reverse proxy
# TODO: Add SSL/TLS certificates
# TODO: Add monitoring (Prometheus/Grafana)
# TODO: Add log aggregation (ELK stack)
# TODO: Add CI/CD integration

# =============================================================================
# End of Dockerfile
# =============================================================================